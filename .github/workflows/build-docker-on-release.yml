name: Building, Testing, and Pushing Archivy Container Image On Version Release

on:
  release:
    types:
      - published

jobs:
  BuildPushUntested:
    name: Build and push image with 'untested' tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout files from repository
        uses: actions/checkout@v2
        with:
          ref: docker

      - name: Setting variables
        if: success()
        run: |
          date -u +'%Y-%m-%dT%H:%M:%SZ' > TIMESTAMP
          echo "${GITHUB_SHA}" | cut -c1-8 > SHORT_SHA
          echo "${GITHUB_REF/refs\/tags\//}" > VERSION
          echo "uzayg" > DOCKER_USERNAME
          echo "docker.io/uzayg/archivy" > DOCKER_IMAGE

      - name: Set up Docker Buildx
        if: success()
        uses: docker/setup-buildx-action@v1.0.2
        with:
          install: true
          version: latest

      - name: Docker login
        if: success()
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "$( cat DOCKER_USERNAME )" --password-stdin docker.io

      # Build and push images with the tags:
      #  untested-X.Y.Z  -  Release version
      - name: Run buildx to push untested image
        if: success()
        run: |
          docker build \
            --output type=image,name="$( cat DOCKER_IMAGE )",push=true --build-arg VERSION="$( cat VERSION )" \
            --build-arg BUILD_DATE="$( cat TIMESTAMP )" --build-arg VCS_REF="$( cat SHORT_SHA )" \
            --tag "$( cat DOCKER_IMAGE ):untested-$( cat VERSION )" \
            --tag "$( cat DOCKER_IMAGE ):untested-$( cat SHORT_SHA )" --file ./Dockerfile .

  ContainerTestAndScan:
    name: Test image with 'untested' tag using Hadolint, container-structure-test, Trivy, and Anchore
    runs-on: ubuntu-latest
    needs: [BuildPushUntested]
    steps:
      - name: Checkout files from repository
        uses: actions/checkout@v2
        with:
          ref: docker

      - name: Setting variables
        if: success()
        run: |
          echo "${GITHUB_REF/refs\/tags\//}" > VERSION
          echo "docker.io/uzayg/archivy" > DOCKER_IMAGE

      # Required by container-structure-test so it can access the image name as an env var.
      - name: Set image name as variable
        if: success()
        run: echo "DOCKER_IMAGE_TAG=$(cat DOCKER_IMAGE):untested-$(cat IMAGE_TAG)" >> ${GITHUB_ENV}

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@v1.1.0
        with:
          dockerfile: "Dockerfile"

      # This is required by container-structure-test. Without this step, it fails to pull the image on its own 
      - name: Run image
        if: success()
        run: docker run --rm uzayg/archivy:untested-"$( cat VERSION )" sleep 0.1

      - name: Test image with container-structure-test
        uses: plexsystems/container-structure-test-action@v0.2.0
        with:
          image: "${DOCKER_IMAGE_TAG}"
          config: "./container-structure-test.yaml"

      - name: Scan for OS vulnerabilities in image using Trivy
        uses: aquasecurity/trivy-action@0.0.8
        with:
          image-ref: "${DOCKER_IMAGE_TAG}"
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Scan image and code for vulnerabilties using Anchore
        uses: anchore/scan-action@v1.0.8
        with:
          image-reference: "${DOCKER_IMAGE_TAG}"
          dockerfile-path: "./Dockerfile"
          fail-build: true
          include-app-packages: true

  dockerBuildPush:
    name: Build and push image with release version tag
    runs-on: ubuntu-latest
    needs: [ContainerTestAndScan]
    steps:
      - name: Checkout files from repository
        uses: actions/checkout@v2
        with:
          ref: docker

      - name: Setting variables
        if: success()
        run: |
          date -u +'%Y-%m-%dT%H:%M:%SZ' > TIMESTAMP
          echo "${GITHUB_SHA}" | cut -c1-8 > SHORT_SHA
          echo "${GITHUB_REF/refs\/tags\//}" > VERSION
          echo "${GITHUB_REF/refs\/tags\//}" | awk -F'.' '{print $1}' > MAJOR_VERSION
          echo "${GITHUB_REF/refs\/tags\//}" | awk -F'.' '{print $2}' > MINOR_VERSION
          echo "uzayg" > DOCKER_USERNAME
          echo "docker.io/uzayg/archivy" > DOCKER_IMAGE

      - name: Set up Docker Buildx
        if: success()
        uses: docker/setup-buildx-action@v1.0.2
        with:
          install: true
          version: latest

      - name: Docker login
        if: success()
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "$( cat DOCKER_USERNAME )" --password-stdin docker.io

      # Build and push images with the tags
      #   X.Y.Z  - Major.Minor.Patch
      #   X.Y    - Major.Minor
      #   hash   - Commit hash(first 8 characters)
      #   stable
      #   latest
      # (Skipped tagging image with major version as it is currently 0.
      #  Will start tagging with the major version once Archivy touches major
      #  version 1.)
      - name: Build and push with Docker Buildx
        if: success()
        run: |
          docker build \
            --output type=image,name="$( cat DOCKER_IMAGE )",push=true \
            --build-arg VERSION="$( cat VERSION )" --build-arg BUILD_DATE="$( cat TIMESTAMP )" \
            --build-arg VCS_REF="$( cat SHORT_SHA )" \
            --tag "$( cat DOCKER_IMAGE ):$( cat VERSION )" \
            --tag "$( cat DOCKER_IMAGE ):$( cat MAJOR_VERSION ).$( cat MINOR_VERSION )" \
            --tag "$( cat DOCKER_IMAGE ):$( cat SHORT_SHA )" \
            --tag "$( cat DOCKER_IMAGE ):stable" \
            --tag "$( cat DOCKER_IMAGE ):latest" \
            --file ./Dockerfile .

  deleteUntestedImage:
    name: Delete images with the 'untested' tag
    runs-on: ubuntu-latest
    needs: [dockerBuildPush]
    steps:
      - name: Setting variables
        if: success()
        run: |
          echo "${GITHUB_SHA}" | cut -c1-8 > SHORT_SHA
          echo "{GITHUB_REF/refs\/tags\//}" > VERSION
          echo "uzayg" > DOCKER_USERNAME
          echo "docker.io/uzayg/archivy" > DOCKER_IMAGE

      - name: Delete 'untested' image
        if: success()
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: |
          docker run --rm lumir/remove-dockerhub-tag --user "$( cat DOCKER_USERNAME )" --password "${DOCKER_PASSWORD}" \
          "$( cat DOCKER_IMAGE ):untested-$( cat VERSION )" "$( cat DOCKER_IMAGE ):untested-$( cat SHORT_SHA )"
